//index.xhtml

<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:b="http://bootsfaces.net/ui"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:h="http://xmlns.jcp.org/jsf/html">
    <h:head>
        <title>Bank System</title>
        <script>

        </script>
    </h:head>
    <h:body>  
        <h1>Transaction Records</h1>
        <h:form>
            <b:commandButton value="My Information" look="info" icon="info-sign" 
                             style="float: right; margin-right: 20px;" action="currUserInfo" 
                             actionListener="#{bankTransactionManagedBean.currentUser}">

            </b:commandButton>
            <b:commandButton value="create" look="success" icon="plus" 
                             style="float: right; margin-right: 20px;" action="addTransaction" >
            </b:commandButton>
            <b:dataTable value="#{bankTransactionManagedBean.bankTransactionList}" 
                         var="btlist" columnVisibility="true" page-length="10" pageLength="10"
                         pdf="true" excel="true" print="true" multi-column-search="true" multiColumnSearch="true" 
                         >
                <b:dataTableColumn value="#{btlist.transactionNo}" label="No" />
                <b:dataTableColumn value="#{btlist.transactionName}" label="Name"/>

                <b:dataTableColumn value="#{btlist.transactionType}" label="Type"  />

                <b:dataTableColumn value="#{btlist.transactionDes}" label="Description"/> 

                <b:dataTableColumn label="" searchable="false">
                    <b:commandButton value="edit" icon="edit" look="primary" 
                                     action="editTransaction" actionListener="#{bankTransactionManagedBean.currentBT}">       
                        <f:attribute name="currBT" value="#{btlist}" />
                    </b:commandButton>
                </b:dataTableColumn>
                <b:dataTableColumn label="" searchable="false">
                    <b:commandButton value="delete" look="danger" icon="remove" 
                                     actionListener="#{bankTransactionManagedBean.deleteBT}" >
                        <f:attribute name="delBTNo" value="#{btlist.transactionNo}" />
                    </b:commandButton>            
                </b:dataTableColumn>
            </b:dataTable>
        </h:form>
    </h:body>
</html>

// JPATransactionRepositoryImpl.java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fit5042.duopan.repository;

import fit5042.duopan.repository.entities.BankTransaction;
import fit5042.duopan.repository.entities.User;
import java.util.List;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author duopan
 */
@Stateless
public class JPATransactionRepositoryImpl implements TransactionRepository
{
    @PersistenceContext(unitName = "A1EjbPU")
    private EntityManager entityManager;

    @Override
    public List<BankTransaction> getAllBankTransactions() throws Exception
    {
        return this.entityManager.createNamedQuery(BankTransaction.GET_ALL_QUERY_NAME).getResultList(); 
    }
    
    @Override
    public void editTransaction(BankTransaction transaction) throws Exception
    {
        entityManager.merge(transaction);
    }

    @Override
    public void removeTransaction(int transactionNo) throws Exception
    {
        BankTransaction bt = searchTransactionByNo(transactionNo);
        if (bt != null)
        {
            entityManager.remove(bt);               
        }
    }

    @Override
    public void addTransaction(BankTransaction transaction) throws Exception
    {
        entityManager.persist(transaction);
    }

    @Override
    public BankTransaction searchTransactionByNo(int transactionNo) throws Exception
    {
        return entityManager.find(BankTransaction.class, transactionNo);
    }

    @Override
    public List<User> getAllUsers() throws Exception
    {
        return this.entityManager.createNamedQuery(User.GET_ALL_QUERY_NAME).getResultList();
    }

    @Override
    public User searchUserById(int userId) throws Exception
    {
        return entityManager.find(User.class, userId);
    }

    @Override
    public void editUser(User user) throws Exception
    {
        entityManager.merge(user);
    }

    @Override
    public void addUser(User user) throws Exception
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeUser(int userId) throws Exception
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
   
}


//  managedBean.java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fit5042.duopan.repository.mbeans;

import fit5042.duopan.repository.TransactionRepository;
import fit5042.duopan.repository.entities.BankTransaction;
import fit5042.duopan.repository.entities.User;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

/**
 *
 * @author duopan
 */
@ManagedBean(name = "bankTransactionManagedBean")
@SessionScoped
public class BankTransactionManagedBean implements Serializable
{
    @EJB
    TransactionRepository transactionRepository;
    
    private List<BankTransaction> bankTransactionList;
    private BankTransaction currBankTransaction;
    private List<User> userList;
    private User currUser;

    
    public BankTransactionManagedBean()
    {
        // variables must be init
        bankTransactionList = new ArrayList<>();
        currBankTransaction = new BankTransaction();
        userList = new ArrayList<>();
        currUser = new User();
    }

    public List<BankTransaction> getBankTransactionList()
    {
        try
        {
            bankTransactionList = transactionRepository.getAllBankTransactions();
        } catch (Exception ex)
        {
            Logger.getLogger(BankTransactionManagedBean.class.getName()).log(Level.SEVERE, null, ex);
        }
        return bankTransactionList;
    }

    public void setBankTransactionList(List<BankTransaction> bankTransactionList)
    {
        this.bankTransactionList = bankTransactionList;
    }

    public List<User> getUserList()
    {
        try
        {
            userList = transactionRepository.getAllUsers();
        } catch (Exception ex)
        {
            Logger.getLogger(BankTransactionManagedBean.class.getName()).log(Level.SEVERE, null, ex);
        }
        return userList;
    }

    public void setUserList(List<User> userList)
    {
        this.userList = userList;
    }

    public User getCurrUser()
    {
        return currUser;
    }

    public void setCurrUser(User currUser)
    {
        this.currUser = currUser;
    }

    public BankTransaction getCurrBankTransaction()
    {
        return currBankTransaction;
    }

    public void setCurrBankTransaction(BankTransaction currBankTransaction)
    {
        this.currBankTransaction = currBankTransaction;
    }

    
    public void currentBT(ActionEvent event)
    {
        currBankTransaction = (BankTransaction) event.getComponent().getAttributes().get("currBT");
    }
    
    public void updateBTL()
    {
        try
        {
            transactionRepository.editTransaction(currBankTransaction);
            FacesContext.getCurrentInstance().getExternalContext().redirect("index.xhtml");           
        } catch (Exception ex)
        {
            Logger.getLogger(BankTransactionManagedBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void deleteBT(ActionEvent event)
    {
        int bt = (int) event.getComponent().getAttributes().get("delBTNo");
        try
        {
            transactionRepository.removeTransaction(bt);
        } catch (Exception ex)
        {
            Logger.getLogger(BankTransactionManagedBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void addBT()
    {
        BankTransaction bt = currBankTransaction;
        try {
            transactionRepository.addTransaction(bt);
            FacesContext.getCurrentInstance().getExternalContext().redirect("index.xhtml");                 
        } catch (Exception ex) {
            FacesContext.getCurrentInstance().addMessage("1", new FacesMessage(
                FacesMessage.SEVERITY_ERROR, "Transaction ID is already in use.", null));
            Logger.getLogger(BankTransactionManagedBean.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
    // called by button my information
    public void currentUser(ActionEvent event)
    {
        try
        {
            currUser = transactionRepository.searchUserById(1);
        } catch (Exception ex)
        {
            Logger.getLogger(BankTransactionManagedBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void currUserInfoSave()
    {
        try
        {
            transactionRepository.editUser(currUser);             
            FacesContext.getCurrentInstance().getExternalContext().redirect("index.xhtml");    
        } catch (Exception ex)
        {
            
            Logger.getLogger(BankTransactionManagedBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }



}

